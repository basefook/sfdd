import csv
import requests
import difflib
import re


HOST = 'localhost'
ENDPOINT = 'http://{}/companies'.format(HOST)
CORPORATE_SUFFIXES = {'llc', 'llp', 'corp', 'inc', 'ltd', 'spa', 'co', 'lp'}

LIMIT = 4
THRESH = -1.0
FORMAT = 'json'


def do_it(reader):

    contacts_fieldnames = [
        'match_key',
        'last_name',
        'first_name',
        'company_name_queried',
        'company_name',
        'company_url',
        'email',
        'phone',
        'title',
        'city',
        'state',
        'country',
        'updated',
        'name_similarity',
    ]

    matches_fieldnames = [
        'match_key',
        'account_id',
        'case_safe_id',
        'company_name_queried',
        'company_name',
        'sf_account_name',
        'company_url',
        'sf_account_url',
        'ave_score',
        'max_score',
        'name_score',
        'url_score',
    ]


    visited_companies = {}
    match_key = 1

    f_contacts = f_matches = None
    file_no = 1

    for i, row in enumerate(reader):
        if i % 10000 == 0:
            if i > 0:
                f_contacts.close()
                f_matches.close()
                file_no += 1
            f_contacts = open('output/contacts-{}.csv'.format(file_no), 'w')
            f_matches = open('output/matches-{}.csv'.format(file_no), 'w')
            contacts_csv = csv.writer(f_contacts)
            matches_csv = csv.writer(f_matches)
            contacts_csv.writerow(contacts_fieldnames)
            matches_csv.writerow(matches_fieldnames)
        if i == 0:
            continue

        row['input_company'] = row['input_company'].strip()

        domain_name_match = re.search('(?<=@)(.+)$', row['email'] or '')
        if domain_name_match:
            row['domain'] = domain_name_match.group()
        else:
            row['domain'] = ''

        company_name = row['company']
        company_domain = row['domain']

        cache_key = (company_name, company_domain)

        print('{:4} Processing {}'.format(i, cache_key))

        # write to company matches table
        if cache_key not in visited_companies:
            visited_companies[cache_key] = match_key
            resp = requests.get(ENDPOINT, params={
                'name': company_name,
                'url': company_domain,
                'limit': LIMIT,
                'thresh': THRESH,
                'format': FORMAT
            })
            for m in resp.json()['matches']:
                matches_csv.writerow([
                    match_key,
                    m['account_id'],
                    m['case_safe_id'],
                    row['input_company'],
                    row['company'],
                    m['sf_account_name'],
                    row['domain'],
                    m['sf_account_url'],
                    m['score']['average'],
                    max(m['score']['name'], m['score']['url']),
                    m['score']['name'],
                    m['score']['url'],
                ])
            match_key += 1

        name_similarity = round(difflib.SequenceMatcher(
            a=normalize_company_name(row['input_company']),
            b=normalize_company_name(row['company'])
        ).ratio(), 3)

        contacts_csv.writerow([
            visited_companies[cache_key],
            row['last_name'],
            row['first_name'],
            row['input_company'].strip(),
            row['company'],
            row['domain'],
            row['email'],
            row['phone'],
            row['title'],
            row['city'],
            row['state'],
            row['country'],
            row['updated'],
            name_similarity,
        ])

    try:
        f_contacts.close()
        f_matches.close()
    except IOError:
        pass

def normalize_company_name(company_name):
    company_name = company_name.strip()
    company_name = re.sub(r'[^a-zA-Z0-9\s]', '', company_name.lower())
    company_name = re.sub('\s+', ' ', company_name)
    company_name = ' '.join(s for s in company_name.split()
                            if s not in CORPORATE_SUFFIXES)
    return company_name


if __name__ == '__main__':
    import sys
    import codecs

    fpath = sys.argv[1]
    with codecs.open(fpath, 'rU', 'utf-8') as fin:
        reader = csv.DictReader(fin, delimiter=',')
        do_it(reader)
